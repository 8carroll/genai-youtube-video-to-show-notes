
                      Posted on Mar 26
 I was working on the migration to AWS of my client, an e-retailer, when I received a phone call: “Paul, we are in trouble, our site has been attacked by denial of service for a week; we are losing money! Can you help?“ Rushing the migration project was not an option. The client had not yet containerized their app, we hadn't done any data migration test, nor any load test. But as I wrote in a previous blog post, Cloud services can also benefit on-premises infrastructure. Time to prove it! The first analyzes carried out revealed the attacker used multiple IPs (from the TOR network) and targeted the site's login page. This page makes database calls and the database was overloaded, causing first latency (then outages) throughout the system.  I get to work right away. Thanks to Terraform, in half a day, I have a functional stack in a test environment, ready to be promoted to production. Here is a diagram of the technical stack deployed to counter the attack my client faced:  Here are the main additions to the existing stack: We moved my clients main DNS zone to the Route53 service (luckily, all the preparatory census work had been carried out before). This brings at least two benefits: We created origin.mydomain.fr type records in this zone and my client did the required work on their webserver to process requests made to this address (including with a TLS certificate so that CloudFront - origin traffic is encrypted in-transit). Once this was tested, we switched the DNS entries for mondomaine.fr and api.mondomaine.fr to CloudFront. To avoid WAF bypass (in case the hacker discovers the origin URLs or simply directly uses the IP of my client's server), CloudFront was configured to send a "secret" header with each origin request, making it easy for on-premise infrastructure to filter any bypassing traffic. The result is immediate: at 8pm. we made the switch. The site immediately became fully available again. At 9pm. the attacker stopped the attack (before waited for the next day for his next attempt)
 The image below shows allowed traffic in orange and blocked traffic in blue. We therefore had 6000 requests per minute, more than twice the usual traffic:
 WAF costs $0.60 per million requests analyzed using basic managed rules (the group that includes all of our rules except one). That's less than $5 per day to protect my client. Be careful though! Advanced rules like Account Takeover Protection are billed (after a free tier of 10,000 calls) $1 per 1000 (yes, 1000, not 1,000,000) calls. And at the beginning, our configuration looked like this this:
 In 24 hours, we burned $700 worth of WAF usage. Fortunately, I had set up cost anomaly alarms when designing the landing zone! It took just a support ticket (category “dispute a charge”) for AWS to gracefully clean our slate! [Nb: in my experience, AWS always clears high slates resulting from configuration errors; this very good commercial policy is one of the reasons, along with the quality of their support, which makes it my favorite cloud provider]. In short, we corrected it by placing the ATP rule in last position in order of priority and, above all, by conditioning its execution on the presence of a label placed by another rule which tags requests on the /connection path.  Relief all the same when we see the traffic passing by the ATP rule go down! After a well-deserved rest, it was time to add an additional benefit for my client: activating Cloudfront cache for all the static resources served by the application. Thanks to Terraform, it's not very complicated: the following block allows you to hide all the gifs.
 Here too, the effect is immediate. A few minutes later, almost 90% of requests were served by CloudFront, relieving my client's infrastructure of quite a load and improving time-to-full-load for clients!
 If you need help migrating to the Cloud, helping your dev teams take advantage of the many services available, do not hesitate to contact me via LinkedIn or my website.  Templates let you quickly answer FAQs or store snippets for re-use. great content! what about the shield standard? in theory that is enabled for any network edge solution on AWS.  
        Are you sure you want to hide this comment? It will become hidden in your post, but will still be visible via the comment's permalink.
       Hide child comments as well 

          Confirm
        
 For further actions, you may consider blocking this person and/or reporting abuse 
              Sabah Shariq - Mar 29
 
              Gambhir Sharma - Mar 30
 
              Francisco - Mar 30
 
              kihuni - Mar 30
 Would you like to become an AWS Community Builder? Learn more about the program and apply to join when applications are open next. 
DEV Community — A constructive and inclusive social network for software developers. With you every step of your journey.
     Built on Forem — the open source software that powers DEV and other inclusive communities. Made with love and Ruby on Rails. DEV Community © 2016 - 2024. 
          We're a place where coders share, stay up-to-date and grow their careers.
      